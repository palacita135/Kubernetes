#Install Ubuntu Server
Boot Ubuntu Server
~ sudo visudo
Find the line that says:

%admin ALL=(ALL) ALL
And change it to:
%admin ALL=(ALL) NOPASSWD: ALL
Save and exit the file

#Using an SSH client
~ ssh <username>@<Raspberry Pi’s IP address>
or
~ ssh <username>@<hostname>

Still not connected to the internet?
To fix this you need to go into the correct file and correct the issue. Run:
~ sudo nano /etc/netplan/50-cloud-init.yaml
so you can edit the file. Edit it so it looks like this again, the indentation needs to be correct for the .yaml to work:

wifis:
  wlan0:
    dhcp4: true
    optional: true
    access-points:
      "home network":
        password: "123456789"
        
Save and exit the file with Ctrl + S and Ctrl + X.
Run:
~ sudo netplan apply
~ sudo reboot 

#Install a desktop
~ sudo apt update
~ sudo apt upgrade

~ sudo apt install xubuntu-desktop
~ sudo apt install lubuntu-desktop
~ sudo reboot

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Installing MicroK8s
You must swap the system
~ sudo nano /boot/firmware/cmdline.txt
And add the following options:
cgroup_enable=memory cgroup_memory=1

The full line for this particular raspberry pi looks like this:
cgroup_enable=memory cgroup_memory=1 net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
Now save the file in your editor and reboot:
~ sudo reboot

~ sudo snap install microk8s --classic --channel=latest/stable

For more information about which releases are available, run :
~ snap info microk8s
Discovering MicroK8s

#Join the group
MicroK8s creates a group to enable seamless usage of commands which require admin privilege. To add your current user to the group and gain access to the .kube caching directory, run the following two commands:
~ sudo usermod -a -G microk8s <USERNAME>
sudo chown -f -R <USERNAME> ~/.kube

You will also need to re-enter the session for the group update to take place:
~ su - <USERNAME>

Check the status
~ microk8s status --wait-ready

#Access Kubernetes
~ microk8s kubectl get nodes
or to see the running services:
~ microk8s kubectl get services

MicroK8s uses a namespaced kubectl command to prevent conflicts with any existing installs of kubectl. If you don’t have an existing install, it is easier to add an alias (append to ~/.bash_aliases) like this:
~ alias kubectl='microk8s kubectl'

#Deploy an app :
~ microk8s kubectl create deployment nginx --image=nginx

It may take a minute or two to install, but you can check the status:
~ microk8s kubectl get pods

#Use add-ons :
~ microk8s enable dns
~ microk8s enable hostpath-storage

Before going further here is a quick intro to the MicroK8s command line:
The start command will start all enabled Kubernetes services: ~ microk8s.start
The inspect command will give you the status of services: ~ microk8s.inspect
The stop command will stop all Kubernetes services: ~ microk8s.stop
You can easily enable Kubernetes add-ons, eg. to enable “kubedns”: ~ microk8s.enable dns
To get the status of the cluster: ~ microk8s.kubectl cluster-info

#Master node and leaf nodes
Now that you have MicroK8s installed on all boards, pick one is to be the master node of your cluster.
On the chosen one, run the following command:
~ sudo microk8s.add-node
This command will generate a connection string in the form of <master_ip>:<port>/<token>.

Adding a node
Now, you need to run the join command from another Pi you want to add to the cluster:
~ microk8s.join <master_ip>:<port>/<token>

For example:
~ microk8s.join 10.55.60.14:25000/JHpbBYMIevZSAMnmjMHmFwanrOYCWZLu

You should be able to see the new node in a few seconds on the master with the following command:
~ microk8s.kubectl get node

For each new node, you need to run :
~ sudo microk8s.add-node
command on the master, copy the output, then run microk8s.join <master node output> on the leaf.

#Removing nodes
To remove a node, run the following command on the master:
~ sudo microk8s remove-node <node name>
The name of nodes are available on the master by running the :
~ microk8s.kubectl get node

Alternatively, you can leave the cluster from a leaf node by running:
~ sudo microk8s.leave
